// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pups.Backend.Api.Data;

#nullable disable

namespace Pups.Backend.Api.Data.Migrations
{
    [DbContext(typeof(MessengerContext))]
    [Migration("20220609111210_UserName-Index")]
    partial class UserNameIndex
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Pups.Backend.Api.Models.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("creator_id");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("type_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TypeId");

                    b.ToTable("Chat", (string)null);
                });

            modelBuilder.Entity("Pups.Backend.Api.Models.ChatMember", b =>
                {
                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("chat_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<string>("ChatName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("chat_name");

                    b.Property<int>("ChatStatusId")
                        .HasColumnType("int")
                        .HasColumnName("chat_status");

                    b.HasKey("ChatId", "UserId");

                    b.HasIndex("ChatStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatMember", (string)null);
                });

            modelBuilder.Entity("Pups.Backend.Api.Models.ChatStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("ChatStatus", (string)null);
                });

            modelBuilder.Entity("Pups.Backend.Api.Models.ChatType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("ChatType", (string)null);
                });

            modelBuilder.Entity("Pups.Backend.Api.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("chat_id");

                    b.Property<DateTime?>("CheckedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("checked_at");

                    b.Property<bool>("Edited")
                        .HasColumnType("bit")
                        .HasColumnName("edited");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payload");

                    b.Property<int?>("ReplyTo")
                        .HasColumnType("int")
                        .HasColumnName("reply_to");

                    b.Property<DateTime>("SendAt")
                        .HasColumnType("datetime")
                        .HasColumnName("send_at");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("sender_id");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("ReplyTo");

                    b.HasIndex("SenderId");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("Pups.Backend.Api.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("info");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("datetime")
                        .HasColumnName("last_seen");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Pups.Backend.Api.Models.Chat", b =>
                {
                    b.HasOne("Pups.Backend.Api.Models.User", "Creator")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Chat_User");

                    b.HasOne("Pups.Backend.Api.Models.ChatType", "Type")
                        .WithMany("Chats")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Chat_ChatType");

                    b.Navigation("Creator");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Pups.Backend.Api.Models.ChatMember", b =>
                {
                    b.HasOne("Pups.Backend.Api.Models.Chat", "Chat")
                        .WithMany("Members")
                        .HasForeignKey("ChatId")
                        .IsRequired()
                        .HasConstraintName("FK_ChatMember_Chat");

                    b.HasOne("Pups.Backend.Api.Models.ChatStatus", "ChatStatusNavigation")
                        .WithMany()
                        .HasForeignKey("ChatStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_ChatMember_ChatStatus");

                    b.HasOne("Pups.Backend.Api.Models.User", "User")
                        .WithMany("Memberships")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ChatMember_User");

                    b.Navigation("Chat");

                    b.Navigation("ChatStatusNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pups.Backend.Api.Models.Message", b =>
                {
                    b.HasOne("Pups.Backend.Api.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .IsRequired()
                        .HasConstraintName("FK_Message_Chat");

                    b.HasOne("Pups.Backend.Api.Models.Message", "ReplyToNavigation")
                        .WithMany("RepliesToThisMessage")
                        .HasForeignKey("ReplyTo")
                        .HasConstraintName("FK_Message_Message");

                    b.HasOne("Pups.Backend.Api.Models.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("FK_Message_User");

                    b.Navigation("Chat");

                    b.Navigation("ReplyToNavigation");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Pups.Backend.Api.Models.Chat", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Pups.Backend.Api.Models.ChatType", b =>
                {
                    b.Navigation("Chats");
                });

            modelBuilder.Entity("Pups.Backend.Api.Models.Message", b =>
                {
                    b.Navigation("RepliesToThisMessage");
                });

            modelBuilder.Entity("Pups.Backend.Api.Models.User", b =>
                {
                    b.Navigation("CreatedChats");

                    b.Navigation("Memberships");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
