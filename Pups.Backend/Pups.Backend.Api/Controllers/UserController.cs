using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Pups.Backend.Api.Dtos.User;
using Pups.Backend.Api.Models;
using Pups.Backend.Api.Services;
using Swashbuckle.AspNetCore.Annotations;
using System.Net;

namespace Pups.Backend.Api.Controllers;

/// <summary>
/// Контроллер для работы с пользователями
/// </summary>
[ApiController]
[Route("[controller]")]
public class UsersController : ControllerBase
{
    private readonly IUserService _userService;
    private readonly IIdentityInfoService _identityInfoService;

    /// <inheritdoc/>
    public UsersController(IUserService userService, IIdentityInfoService identityInfoService)
    {
        _userService = userService;
        _identityInfoService = identityInfoService;
    }

    // GET /users
    /// <summary>
    /// Получить список всех пользователей системы
    /// </summary>
    /// <returns>Коллекцию пользователей</returns>
    [HttpGet(Name = "Get Users")]
    [SwaggerResponse((int)HttpStatusCode.OK, Type = typeof(IEnumerable<UserDto>))]
    public async Task<ActionResult<IEnumerable<UserDto>>> GetUsers()
    {
        var users = (await _userService.GetUsers())
            .Select(x => x.AsDto());

        return Ok(users);
    }

    // GET /users/id
    /// <summary>
    /// Получить конкретного пользователя по его ID
    /// </summary>
    /// <param name="id" example="abcd1234-ab12-ab12-ab12-abcdef123456">ID пользователя</param>
    /// <returns>Пользователя</returns>
    /// <response code="200"></response>
    /// <response code="404"></response>
    [HttpGet("{id}", Name = "Get User")]
    [SwaggerResponse((int)HttpStatusCode.OK, Type = typeof(UserDto))]
    [SwaggerResponse((int)HttpStatusCode.NotFound)]
    public async Task<ActionResult<UserDto>> GetUser(Guid id)
    {
        var user = await _userService.GetUser(id);

        if (user is null)
            return NotFound();

        return Ok(user.AsDto());
    }

    // GET /users/id
    /// <summary>
    /// Выполнить поиск по имени пользоваетеля
    /// </summary>
    /// <param name="userName" example="Tesk">Имя пользователя</param>
    /// <returns>Пользователя</returns>
    /// <response code="200"></response>
    [HttpGet("FindUser/{userName}")]
    [SwaggerResponse((int)HttpStatusCode.OK, Type = typeof(IEnumerable<UserDto>))]
    public async Task<ActionResult<IEnumerable<UserDto>>> FindUser(string? userName)
    {
        if (userName is null)
            return BadRequest();

        var users = await _userService.FindUser(userName);

        return Ok(users.Select(x => x.AsDto()));
    }

    // POST /users
    /// <summary>
    /// Создать нового пользователя в контексте приложения
    /// после создания в Identity модуле
    /// </summary>
    /// <param name="userDto">Данные необходимые для создания пользователя</param>
    /// <returns></returns>
    /// <response code="201">Пользователь создан</response>
    /// <response code="400">Пользователь с переданным ID/Username уже существует</response>
    [HttpPost]
    [SwaggerResponse((int)HttpStatusCode.Created, Type = typeof(UserDto))]
    public async Task<ActionResult<UserDto>> CreateUser([FromBody, BindRequired] CreateUserDto userDto)
    {
        var user = new User()
        {
            // Id should be provided here, as it is generated by Identity
            // && replicated in Identity Tables
            Id = userDto.Id,
            Username = userDto.Username,
            Email = userDto.Email,
            Info = userDto.Info,
            Created = DateTime.UtcNow,
            LastSeen = DateTime.UtcNow
        };
        
        if (await _userService.DoesUserExist(userDto.Id))
        {
            await _identityInfoService.DeleteConflictingUser(userDto.Id);
            return BadRequest("Пользователь уже существует в приложении");
        }

        if (!await _userService.IsUserNameNew(userDto.Username))
        {
            await _identityInfoService.DeleteConflictingUser(userDto.Id);
            return BadRequest("Переданное имя пользователя уже используется");
        }

        if (!await _identityInfoService.DoesUserExist(user))
        {
            await _identityInfoService.DeleteConflictingUser(userDto.Id);
            return BadRequest("Пользователь не был создан в Identity модуле до вызова API");
        }

        await _userService.CreateUser(user);

        return CreatedAtAction(nameof(GetUser), new { id = user.Id }, user.AsDto());
    }

    // PUT /users/id
    /// <summary>
    /// Обновить данные пользователя по его ID
    /// </summary>
    /// <param name="id" example="abcd1234-ab12-ab12-ab12-abcdef123456">ID пользователя</param>
    /// <param name="userDto">Измененные данные</param>
    /// <response code="204">Пользователь обновлен</response>
    /// <response code="400">Имя пользователя не уникально или произошла ошибка при его обновлении</response>
    /// <response code="404">Пользователя с данным ID не найдено</response>
    [HttpPut("{id}")]
    [SwaggerResponse((int)HttpStatusCode.NoContent)]
    [SwaggerResponse((int)HttpStatusCode.NotFound)]
    public async Task<ActionResult> UpdateUser(Guid id, [FromBody, BindRequired] UpdateUserDto userDto)
    {
        var existingUser = await _userService.GetUser(id);

        if (existingUser is null)
            return NotFound();

        if (userDto.Username != null && !existingUser.Username.Equals(userDto.Username)) { 
            if (await _userService.IsUserNameNew(userDto.Username))
            {
                if (!await _identityInfoService.UpdateUsername(existingUser.Id, userDto.Username))
                {
                    return BadRequest("Failed to update Identity Username");
                }
            } else return BadRequest("Username is not unique");
        }

        User user = new()
        {
            Id = existingUser.Id,
            Username = userDto.Username ?? existingUser.Username,
            Email = existingUser.Email,
            Info = userDto.Info ?? existingUser.Info,
            Created = existingUser.Created,
            LastSeen = userDto.LastSeen ?? existingUser.LastSeen
        };

        await _userService.UpdateUser(user);
        return NoContent();
    }
}
