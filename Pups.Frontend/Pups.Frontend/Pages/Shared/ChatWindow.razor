@using Pups.Frontend.Models.Domain
@using Pups.Frontend.Models.Domain.Dtos
@using Newtonsoft.Json
@inject IHttpClientFactory ClientFactory

<div>
    <div class="row" style="background: #b4dbe7; height: 50px; width: 100%">
        <div style="right: 10px">
            <strong>@ChatName</strong>
            @if (Members.Count == 2)
            {
                var online = secondUser.LastSeen;
                <span class="online">
                    Последний раз в сети @online.TimeOfDay
                </span>   
            }
        </div>
    </div>
    <div style="background: #ffffff; height: 750px; width: 100%;">
        <nav>
            <ul class="message-list">
                @foreach (var message in messageList)
                {
                    if (message.SenderId == secondUser.Id)
                    {
                        <li class="others">@message.Payload</li>
                    }
                    else
                    {
                        <li class="self">@message.Payload</li>   
                    }
                }
            </ul>
        </nav>
    </div>
    
    <div>
        <div class="input-group mb-3">
            <input type="text" class="form-control" placeholder="Text..." aria-label="Text..." aria-describedby="basic-addon2" @bind="@userMessage">
            <div class="input-group-append">
            <button class="btn btn-outline-secondary" type="button" @onclick="SendMessage">Send</button>
          </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? Url { get; set; }

    [Parameter]
    public string ChatName { get; set; } = "UserName";
    
    [Parameter]
    public List<ChatMember> Members { get; set; }

    private User? secondUser;
    private List<Message>? messageList = new List<Message>();
    
    private void GetUser()
    {
        using (var client = ClientFactory.CreateClient("api"))
        {
            var responseUser = client.GetAsync($"Users/{Members[1].UserId}").Result;
            if (responseUser.IsSuccessStatusCode)
            {
                var res = responseUser.Content.ReadAsStringAsync().Result;
                secondUser = JsonConvert.DeserializeObject<User>(res);
            }
        }
    }
    
    private void GetMessages()
    {
        using (var client = ClientFactory.CreateClient("api"))
        {
            var responseUser = client.GetAsync($"/Messages/FromChat/{Url}").Result;
            if (responseUser.IsSuccessStatusCode)
            {
                var res = responseUser.Content.ReadAsStringAsync().Result;
                messageList = JsonConvert.DeserializeObject<List<Message>>(res);
            }
        }
    }
    
    protected override void OnInitialized()
    {
        if(Members.Count==2)
            GetUser();
        GetMessages();
        base.OnInitialized();
    }
    
    private string userMessage = "";
    
    private DateTime date = DateTime.Now;

    public void SendMessage()
    {
        if (userMessage == "") return;
        messageList.Add(new Message()
        {
            Payload = userMessage
        });
        userMessage = "";
    }
}