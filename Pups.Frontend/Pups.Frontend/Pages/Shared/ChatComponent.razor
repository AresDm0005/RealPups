@using Microsoft.AspNetCore.SignalR.Client
@using Pups.Frontend.Models.Domain
@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@implements IAsyncDisposable

<div class="row">
    <nav class="col-md-3">
        <div class="input-group mb-3">
                <input type="text" class="form-control" placeholder="Search" aria-label="Text..." aria-describedby="basic-addon2" @bind="@searchText">
                <div class="input-group-append">
                    <button class="btn btn-outline-secondary" type="button" @onclick="Search">Search</button>
                </div>
            </div>
        <ul class="chat-selector" style="list-style-type: none;">
            @for (int i = 0; i < 10; ++i)
            {
                string message = $"Message{i}";
                string username = $"Username{i}";
                <li @onclick="() => SelectChat(i.ToString())"><ChatSelector Message=@message Username=@username></ChatSelector></li>
            }
        </ul>
    </nav>
    <div class="col-md-9">
        @if (chatSelect)
        {
            <ChatWindow Url=@selectChatUrl userName=@userName/>
        }
        else
        {
            <canvas x="0" y="0" rx="5" ry="5" width="1000" height="800" style="fill:red;stroke:black;stroke-width:5;opacity:0.5;border:1px solid #000000;">
            </canvas>
        }
    </div>
</div>



@code {
    private HubConnection? _hubConnection;
    private List<string> _messages = new List<string>();
    private string? _userInput;
    private string? _groupInput;
    private string? _messageInput;
    private bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;
    private bool chatSelect = false;
    private string? selectChatUrl = null;
    private string userName;

    private List<Chat> chats;

    protected override async Task OnInitializedAsync()
    {
    // chats = await callChatApi(userId);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Console.WriteLine(authState.User.Identities);
        foreach (var claim in authState.User.Identities)
        {
            Console.WriteLine(claim);   
        }
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        _hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            _messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });
        _hubConnection.On<string, string>("ReceiveGroupMessage", (user, message) =>
        {
            var encodedMsg = $"group {user}: {message}";
            _messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });


        await _hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (_hubConnection is not null)
        {
            if(_groupInput is not null)
                await _hubConnection.SendAsync("SendGroupMessage", _userInput, _groupInput, _messageInput);
            else
                await _hubConnection.SendAsync("SendMessage", _userInput, _messageInput);
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    public async Task SelectChat(string url)
    {
        chatSelect = true;
        selectChatUrl = url;
        var rnd = new Random();
        userName = $"test{rnd.NextInt64(10)}";
    }

    private string? searchText;

    private void Search()
    {
        throw new NotImplementedException();
    }

}