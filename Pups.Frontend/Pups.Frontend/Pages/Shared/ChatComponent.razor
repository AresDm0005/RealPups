@using Microsoft.AspNetCore.SignalR.Client
@using Pups.Frontend.Models.Domain
@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using Newtonsoft.Json
@using Pups.Frontend.Models.Domain.Dtos
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@implements IAsyncDisposable

<div class="row">
    <nav class="col-md-3">
        <div class="input-group mb-3">
                <input type="text" class="form-control" placeholder="Search" aria-label="Text..." aria-describedby="basic-addon2" @bind="@searchText">
                <div class="input-group-append">
                    <button class="btn btn-outline-secondary" type="button" @onclick="Search">Search</button>
                </div>
            </div>
        <ul class="chat-selector" style="list-style-type: none;">
            @foreach (var chat in chatDictionary.Values)
            {
                <li @onclick="() => SelectChat(chat.Id.ToString())"><ChatSelector Message=@chat.Message Username=@chat.ChatName></ChatSelector></li>
            }
        </ul>
    </nav>
    <div class="col-md-9">
        @if (chatSelect)
        {
            <ChatWindow Url=@selectChatUrl.ToString() ChatName=@chatDictionary[selectChatUrl].ChatName Members=@chatDictionary[selectChatUrl].Members.ToList()/>
        }
        else
        {
            <canvas x="0" y="0" rx="5" ry="5" width="1000" height="800" style="fill:red;stroke:black;stroke-width:5;opacity:0.5;border:1px solid #000000;">
            </canvas>
        }
    </div>
</div>



@code {
    private HubConnection? _hubConnection;
    private List<string> _messages = new List<string>();
    private string? _userInput;
    private string? _groupInput;
    private string? _messageInput;
    private bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;
    private bool chatSelect = false;
    private Guid selectChatUrl;
    private Dictionary<Guid, ChatPreview> chatDictionary = new  Dictionary<Guid, ChatPreview>();
    private List<Chat> chats;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.Identities.Select(claimIdentity => claimIdentity.Claims.FirstOrDefault(claim => claim.Type == ClaimTypes.NameIdentifier)).FirstOrDefault();
        
        var chats = new Dictionary<Guid, chatDto>();
        using (var client = ClientFactory.CreateClient("api"))
        {
            var responseUserChats = await client.GetAsync($"Chats/UserChats/{userId.Value}");
            if (responseUserChats.IsSuccessStatusCode)
            {
                var res = responseUserChats.Content.ReadAsStringAsync().Result;
                var chatsList = JsonConvert.DeserializeObject<List<chatDto>>(res);
                foreach (var chat in chatsList)
                {
                    var chatItemResponse = await client.GetAsync($"Chats/{chat.Id}?includeMembers=true");
                    if (chatItemResponse.IsSuccessStatusCode)
                    {
                        var result = chatItemResponse.Content.ReadAsStringAsync().Result;
                        var chatItem = JsonConvert.DeserializeObject<chatDto>(result);
                        if(chatItem is not null)
                            chats.Add(chatItem.Id, chatItem);
                    }
                }
            }
        }
        foreach (var chat in chats)
        {
            chatDictionary.Add(chat.Key, new ChatPreview()
            {
                Id = chat.Key,
                ChatName = chat.Value.Members.ToList()[0].ChatName,
                Message = new Message(), // TODO
                Members = chat.Value.Members
            });
        }
        
        #region Hub

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();
        
        _hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            _messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });
        _hubConnection.On<string, string>("ReceiveGroupMessage", (user, message) =>
        {
            var encodedMsg = $"group {user}: {message}";
            _messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        #endregion

        await _hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (_hubConnection is not null)
        {
            if(_groupInput is not null)
                await _hubConnection.SendAsync("SendGroupMessage", _userInput, _groupInput, _messageInput);
            else
                await _hubConnection.SendAsync("SendMessage", _userInput, _messageInput);
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    public async Task SelectChat(string url)
    {
        chatSelect = true;
        selectChatUrl = new Guid(url);
    }

    private string? searchText;

    private void Search()
    {
        throw new NotImplementedException();
    }

}